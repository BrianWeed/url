[/
    Copyright (c) 2022 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[section Rules]

A __Rule__ is an object which attempts to match the beginning
of an input character buffer against a particular syntax.
Rules return a __result__ containing a value if the match
was successful, otherwise an __error_code__. Overloads of
__parse__ are used to process character buffers, with the
rule passed as the last argument. The first version requires
that the entire input string match, or else the parse fails
and an error is returned. 

```
template< class __Rule__ >
auto parse( string_view s, Rule const& r) -> result< typename Rule::value_type >;

template< class __Rule__ >
auto parse( char const *& it, char const* end, Rule const& r) -> result< typename Rule::value_type >;
```

The first overload requires that the entire input string match,
or else an error is returned. The second version modifies the
caller's variable to denote the first unconsumed character in
the buffer. Rule expressions can come in several styles:

[table Rule Expressions [
    [Expression]
    [What]
][
    [
    ```
    constexpr ``['implementation-defined]`` ``__dec_octet_rule__``;
    ```
    ]
    [
    A compile-time constant.
    ]
][
    [
    ```
    ``__unsigned_dec_rule__``< unsigned long >{}
    ```
    ]
    [
    Run-time construction of a rule object which
    accepts template parameters.
    ]
][
    [
    ```
    ``__delim_rule__``('.')
    ```
    ]
    [
    A function accepting parameters and returning a rule.
    ]
]]

In every case, the type of the rule object passed to the __parse__ function
must satisfy the ['Rule] concept, which requires:

* A nested `value_type` indicating the type of value returned
  upon success (which may be void).

* A member function with the following signature:
    ```
    bool parse( char const*& it, char const* end ) const;
    ```

[endsect]
