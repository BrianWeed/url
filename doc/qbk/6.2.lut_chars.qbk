[/
    Copyright (c) 2022 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[section:lut_chars The [*lut_chars] Type]

Values of type __lut_chars__ satisfy the __CharSet__
requirements and offer an optimized, fully `constexpr`
implementation which allows notational convenience and
enhanced performance. Here we declare the set of upper
and lower case vowels:

```
/** The set of vowels

    BNF
        vowel = "A" / "E" / "I" / "O" / "U" /
                "a" / "e" / "i" / "o" / "u"
*/
constexpr lut_chars vowels = "AEIOU" "aeiou";
```

We can use `operator+` and `operator-` notation to add and
remove elements from the set at compile time. For example,
sometimes the character 'y' sounds like a vowel:

```
constexpr auto vowels_and_y = vowels + 'y' + 'Y';
```

The type is named after its implementation, which is a
lookup table ("lut") of packed bits. This allows for a
variety of construction methods and flexible composition.
Here we create the set of visible characters using a lambda:

```
/** The set of visible characters

    BNF
        visible = %x21-7e
*/
constexpr lut_chars visible_chars( [](char ch) { return ch >= 33 && ch <= 126; } ); // (since C++17)
```

In C++11 the value above may be declared thusly:

```
struct is_visible
{
    constexpr bool operator()( char ch ) const noexcept
    {            
        return ch >= 33 && ch <= 126;
    }
};
constexpr lut_chars visible_chars( is_visible{} );
```

Differences can be calculated with `operator-`:

```
/// The set of visible characters that are not vowels
constexpr auto visible_non_vowels = visible_chars - vowels;
```

Constants offered by the library for the character sets
used in __rfc3986__ to specify rules for URL components are:

[table RFC3986 Character Sets [
    [Name]
    [BNF]
][
    [[link url.ref.boost__urls__gen_delim_chars `gen_delim_chars`]]
    [
    ```
    gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
    ```
    ]
][
    [[link url.ref.boost__urls__pchars `pchars`]]
    [
    ```
    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
    ```
    ]
][
    [[link url.ref.boost__urls__reserved_chars `reserved_chars`]]
    [
    (everything but
    [link url.ref.boost__urls__unreserved_chars `unreserved_chars`])
    ]
][
    [[link url.ref.boost__urls__sub_delim_chars `sub_delim_chars`]]
    [
    ```
    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
                  / "*" / "+" / "," / ";" / "="
    ```
    ]
][
    [[link url.ref.boost__urls__unreserved_chars `unreserved_chars`]]
    [
    ```
    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
    ```
    ]
]]

[endsect]
