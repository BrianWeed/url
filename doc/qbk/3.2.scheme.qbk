[/
    Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/CPPAlliance/url
]

[/-----------------------------------------------------------------------------]

[section Scheme]

Every URL has a
[@https://datatracker.ietf.org/doc/html/rfc3986#section-3.1 ['scheme]]:
a case-insensitive word that precisely specifies both the meaning and
the syntax of the remainder of the URL. Almost everyone has seen
examples of the
[@https://datatracker.ietf.org/doc/html/rfc7230#section-2.7.1 ['http URI scheme]],
used to identify resources on the
[@https://en.wikipedia.org/wiki/World_Wide_Web ['World Wide Web]]:
[teletype]
```
http://www.example.com/images/cat-photo.gif
```

The scheme is sometimes omitted from the URL when it is implied
by the surrounding context. The text `john.doe@example.com`
is widely understood to be an email address, but with the
explicit
[@https://datatracker.ietf.org/doc/html/rfc6068 ['mailto URI scheme]]
it becomes
[@mailto:john.doe@example.com `mailto:john.doe@example.com`].
When a URL lacks a scheme, it is the caller's responsibility
to validate the semantic contents according to the surrounding
context. This table shows the top level grammars, their treatment
of the scheme, and the library function used to interpret strings
using that grammar:

[table Grammar [
    [Name]
    [Scheme]
    [Function]
][
    [['URI]]
    [required]
    [[link url.ref.boost__urls__parse_uri `parse_uri`]]
][
    [['absolute-URI]]
    [required]
    [[link url.ref.boost__urls__parse_absolute_uri `parse_absolute_uri`]]
][
    [['URI-reference]]
    [optional]
    [[link url.ref.boost__urls__parse_uri_reference `parse_uri_reference`]]
][
    [['relative-ref]]
    [none]
    [[link url.ref.boost__urls__parse_relative_ref `parse_relative_ref`]]
][
    [['origin-form]]
    [none]
    [[link url.ref.boost__urls__parse_origin_form `parse_origin_form`]]
]]

The
[@https://datatracker.ietf.org/doc/html/rfc7230#section-5.3.1 origin-form grammar]
is used in the
[@https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.1 HTTP request-line],
where the scheme is omitted and the path must be absolute
(start with '/'): For example, here is a GET request-line:
[teletype]
```
    GET /pub/WWW/TheProject.html HTTP/1.1
```

The scheme is implied as
[@https://datatracker.ietf.org/doc/html/rfc7230#section-2.7.1 http]
or
[@https://datatracker.ietf.org/doc/html/rfc7230#section-2.7.2 https]
depending on the type of connection.

One of the conventions of the HTTP scheme is that when the port 80 is
implicitly assumed when it is not provided. Such conventions are not
part of the URL protocol.

The scheme is the top-level component defining the semantics of
the URL. It usually represents a protocol, such as HTTP
or FTP. In these protocols, the path describes a resource
and the host describes how to access it.

[snippet_components_2b]

A scheme must start with a letter, and may contain only letters,
digits, plus and minus signs, and periods. It is always followed
by a colon when it appears in a URL.

Schemes do not necessarily represent protocols. The `file`
scheme is used to identify files from within one's own
computer.

[teletype]
```
    file:///usr/local/bin/
```

Other schemes use opaque paths that only identify resources.
They usually represent resources through the path. The `mailto`
scheme is used to represent email addresses with the path
component. It is intented to produce hyperlinks that
allow users to send an email to specific addresses:

[snippet_components_2c]

The `urn` scheme uses an opaque path to unique identifiers
to a resource. A typical URN namespace is `isbn`, for
International Standard Book Numbers. A book can be identified
as:

[snippet_components_2d]

Magnet links, which use the `magnet` scheme, identify files
by their cryptographic hash value. They have empty paths
and use queries to describe the resource. The scheme
allows more fields related to the file, such as a
display name, keywords, and file sources.

[snippet_components_2e]

A number of
[@https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml official URL schemes]
registered with the Internet Assigned Numbers Authority (IANA) have their
own grammars.

The function [link url.ref.boost__urls__url_view.scheme `scheme`] can
be used to obtain the scheme from a __url_view__:

[snippet_parsing_scheme_1]

If the URL has no scheme, this function returns an empty string. To check whether
a URL contains a scheme the function
[link url.ref.boost__urls__url_view.has_scheme `url_view::has_scheme`] might be used.

The library also defines an enumeration of values for some well-known scheme
identifiers:

[c++]
[snippet_parsing_scheme_3]

These may be used instead of their corresponding strings:

[table Scheme IDs [
    [ID]
    [Description]
][
    [[link url.ref.boost__urls__scheme `scheme::ftp`]]
    [File Transfer Protocol ("FTP")]
][
    [[link url.ref.boost__urls__scheme `scheme::file`]]
    [File URI Scheme]
][
    [[link url.ref.boost__urls__scheme `scheme::http`]]
    [Hypertext Transfer Protocol]
][
    [[link url.ref.boost__urls__scheme `scheme::https`]]
    [Secure Hypertext Transfer Protocol]
][
    [[link url.ref.boost__urls__scheme `scheme::ws`]]
    [WebSocket Protocol]
][
    [[link url.ref.boost__urls__scheme `scheme::wss`]]
    [Secure WebSocket Protocol]
]]

[note
    None of these functions throw exceptions. If the URL has no scheme,
    [link url.ref.boost__urls__url_view.scheme `scheme`] returns an empty
    string. If the function
    [link url.ref.boost__urls__url_view.scheme_id `scheme_id`] identifies a valid
    but unknown scheme, the value [link url.ref.boost__urls__scheme `scheme::unknown`]
    is returned.
]

[endsect]
